---
import StartLayout from "../layouts/StartLayout.astro";
import { MeiliSearch, type SearchResponse } from "meilisearch";
import Pagination from "../components/Pagination.astro";
import Preview from "../components/Preview.astro";
import Checkbox from "../components/Checkbox.astro";

interface FilterJson {
    client_server?: boolean;
    server_server?: boolean;
    application_services?: boolean;
    e2e?: boolean;
    kind_core?: boolean;
    kind_feature?: boolean;
    kind_maintenance?: boolean;
    needs_implementation?: boolean;
    proposal?: boolean;
    abandoned?: boolean;
    blocked?: boolean;
    state?: {
        merged?: boolean;
        closed?: boolean;
        other?: boolean;
    };
    start_opened_date?: number;
    end_opened_date?: number;
    start_merged_closed_date?: number;
    end_merged_closed_date?: number;
    [key: string]: number | boolean | {
        merged?: boolean;
        closed?: boolean;
        other?: boolean;
    } | undefined;
}

const parsed_url = new URL(Astro.request.url);
const search_params = parsed_url.searchParams;
const query = search_params.get("q");
const filter = search_params.get("filter");
const current_page = search_params.get("page");
const filter_parsed: FilterJson = JSON.parse(filter || "{}");
let results: SearchResponse | undefined = undefined;
if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();

        const entries = Object.fromEntries(data.entries());
        const filter_json: FilterJson = {};
        for (const key in entries) {
            if (entries.hasOwnProperty(key)) {
                if (entries[key] === "on") {
                     if (key === "merged" || key === "closed" || key === "other") {
                        filter_json["state"] = {
                            ...filter_json["state"],
                            [key]: true,
                        };
                    } else{
                        filter_json[key] = true;
                    }
                } else if (
                    key === "start-opened-date" ||
                    key === "end-opened-date" ||
                    key === "start-merged-closed-date" ||
                    key === "end-merged-closed-date"
                ) {
                    const fixed_key = key.replaceAll("-", "_");
                    if (entries[key] !== "") {
                        const milis = Date.parse(entries[key] as string);
                        filter_json[fixed_key] = milis / 1000;
                    } else {
                        filter_json[fixed_key] = undefined;
                    }
                }
            }
        }

        const searchQuery = data.get("search");
        const json = JSON.stringify(filter_json);
        const search_params = new URLSearchParams({
            q: searchQuery as string,
            filter: json,
        });
        return Astro.redirect(`/results?${search_params.toString()}`);
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
} else {
    const has_query = search_params.has("q");
    if (has_query) {
        const INDEX = import.meta.env.INDEX;
        const client = new MeiliSearch({
            host: import.meta.env.MEILI_HOST ?? "http://127.0.0.1:7700",
            apiKey: import.meta.env.API_KEY,
            requestConfig: {
                headers: {
                    Authorization: `Bearer ${import.meta.env.API_KEY}` ?? "",
                },
            },
        });
        results = await client.index(INDEX).search(query, {
            filter: filter_to_string(filter_parsed),
            page: parseInt(current_page ?? "1"),
        });
        console.log(results);
    }
}

function format_date(time: number | undefined): string | undefined {
    if (time === undefined || time === null) {
        return undefined;
    }
    const date = new Date(time * 1000);
    return date.toISOString().split("T")[0];
}

/** This function converts the filter json to a meilisearch filter string
 * We must make sure to not have a stray AND at the end.
 * If we compare labels we need to have an OR relation between them.
 * If we check state we need to check if it is merged, closed or other by comapring the state field to the string in uppercase.
 * Other means that it is not merged or closed.
 * It also can never be AND for a state as it can only be either merged, closed or other.
 *
 *
 * @param filter The filter json
 * @returns The filter string
 * @example
 * Example:
 * 
 * ```json
 * {
 *   client_server: true,
 *   server_server: true,
 *   state: {
 *     merged: true,
 *     closed: true,
 *   }
 * }
 * ```
 * 
 * should be converted to
 * 
 * ```text
 * (labels.name = "client_server" OR labels.name = "server_server") AND (state = "MERGED" OR state = "CLOSED")
 * ```
*/

function filter_to_string(filter: FilterJson): string {
    let filter_string = "";

    // Copy the filter to not mutate the original
   const filter_copy = { ...filter };
    
    // Split the state filter from the rest
    const state_filter = filter_copy.state;
    delete filter_copy.state;

    // Convert the state filter to a string
    if (state_filter !== undefined) {
        if (state_filter.merged) {
            filter_string += `(state = "MERGED"`;
        }
        if (state_filter.closed) {
            if (filter_string === "") {
                filter_string += `(state = "CLOSED"`;
            } else {
                filter_string += ` OR state = "CLOSED"`;
            }
        }
        if (state_filter.other) {
            if (filter_string === "") {
                filter_string += `((state != "MERGED" AND state != "CLOSED")`;
            } else {
                filter_string += ` OR (state != "MERGED" AND state != "CLOSED")`;
            }
        }
        // Close the state filter
        if (filter_string !== "") {
            filter_string += ")";
        }
    }

    // Split the date filters from the rest
    const start_opened_date = filter_copy.start_opened_date;
    const end_opened_date = filter_copy.end_opened_date;
    const start_merged_closed_date = filter_copy.start_merged_closed_date;
    const end_merged_closed_date = filter_copy.end_merged_closed_date;
    delete filter_copy.start_opened_date;
    delete filter_copy.end_opened_date;
    delete filter_copy.start_merged_closed_date;
    delete filter_copy.end_merged_closed_date;

    // Convert the date filters to a string
    let date_filter = "(";
    if (start_opened_date !== undefined) {
        if (date_filter === "(") {
            date_filter += `created_at >= ${start_opened_date}`;
        } else {
            date_filter += ` AND created_at >= ${start_opened_date}`;
        }
    }

    if (end_opened_date !== undefined) {
        if (date_filter === "(") {
            date_filter += `created_at <= ${end_opened_date}`;
        } else {
            date_filter += ` AND created_at <= ${end_opened_date}`;
        }
    }

    if (start_merged_closed_date !== undefined) {
        if (date_filter === "(") {
            date_filter += `(merged_at >= ${start_merged_closed_date} AND merged_at != null) OR (closed_at >= ${start_merged_closed_date} AND closed_at != null)`;
        } else {
            date_filter += ` AND (merged_at >= ${start_merged_closed_date} AND merged_at != null) OR (closed_at >= ${start_merged_closed_date} AND closed_at != null)`;
        }
    }

    if (end_merged_closed_date !== undefined) {
        if (date_filter === "(") {
            date_filter += `(merged_at <= ${end_merged_closed_date} AND merged_at != null) OR (closed_at <= ${end_merged_closed_date} AND closed_at != null)`;
        } else {
            date_filter += ` AND (merged_at <= ${end_merged_closed_date} AND merged_at != null) OR (closed_at <= ${end_merged_closed_date} AND closed_at != null)`;
        }
    }

    // Close the date filter
    if (date_filter !== "") {
        date_filter += ")";
    }

    if (filter_string !== "" && date_filter !== "()") {
        filter_string += ` AND ${date_filter}`;
    } else if (filter_string === "" && date_filter !== "()") {
        filter_string += date_filter;
    }

    // Convert the rest of the filter to a string
    let label_filter = "(";
    for (const key in filter_copy) {
        if (filter.hasOwnProperty(key)) {
            const value = filter[key];
            if (value === undefined) {
                continue;
            }
            if (typeof value === "boolean") {
                if (value) {
                    // Add filter but make sure we don't have a stray OR at the end
                    if (label_filter === "(") {
                        label_filter += `labels.name = "${key}"`;
                    } else {
                        label_filter += ` OR labels.name = "${key}"`;
                    }
                }
            }
        }
    }
    // Close the label filter
    if (label_filter !== "") {
        label_filter += ")";
    }
    if (filter_string !== "" && label_filter !== "()") {
        filter_string += ` AND ${label_filter}`;
    } else if (filter_string === "" && label_filter !== "()") {
        filter_string += label_filter;
    }

    console.log(filter_string)
    return filter_string;
}
---

<StartLayout>
    <form method="POST">
        <main>
            <header>
                <h1>Matrix Spec Changes</h1>
                <div id="search">
                    <input type="search" name="search" aria-label="Search" value={query} required />
                    <button type="submit" >
                        <svg id="search-icon"
                            width="24"
                            height="24"
                            viewBox="0 0 48 48"
                            fill="none"
                            aria-label="Search"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <g clip-path="url(#clip0_2_39)">
                                <path
                                    d="M31 28H29.42L28.86 27.46C30.82 25.18 32 22.22 32 19C32 11.82 26.18 6 19 6C11.82 6 6 11.82 6 19C6 26.18 11.82 32 19 32C22.22 32 25.18 30.82 27.46 28.86L28 29.42V31L38 40.98L40.98 38L31 28ZM19 28C14.02 28 10 23.98 10 19C10 14.02 14.02 10 19 10C23.98 10 28 14.02 28 19C28 23.98 23.98 28 19 28Z"
                                    fill="#334155"></path>
                            </g>
                            <defs>
                                <clipPath id="clip0_2_39">
                                    <rect width="48" height="48" fill="white"
                                    ></rect>
                                </clipPath>
                            </defs>
                        </svg>
                    </button>
                </div>
            </header>
            <div id="content">
                <div id="results">
                    {results?.hits.map((hit) => (
                        <Preview
                            title={hit.title}
                            author={hit.author}
                            content={hit.body}
                            id={hit.number}
                        />
                    ))}
                </div>
                <aside id="filters">
                    <div class="filter-section">
                        <h1>Labels</h1>
                        <div class="filter-options">
                            <Checkbox name="client_server" label="Client-Server" checked={filter_parsed.client_server} />
                            <Checkbox name="server_server" label="Server-Server" checked={filter_parsed.server_server} />
                            <Checkbox name="application_services" label="Application Services" checked={filter_parsed.application_services} />
                            <Checkbox name="e2e" label="E2EE" checked={filter_parsed.e2e} />
                            <Checkbox name="kind_core" label="Kind: Core" checked={filter_parsed.kind_core} />
                            <Checkbox name="kind_feature" label="Kind: Feature" checked={filter_parsed.kind_feature} />
                            <Checkbox name="kind_maintenance" label="Kind: Maintenance" checked={filter_parsed.kind_maintenance} />
                            <Checkbox name="needs_implementation" label="Needs Implementation" checked={filter_parsed.needs_implementation} />
                            <Checkbox name="proposal" label="Proposal" checked={filter_parsed.proposal} />
                            <Checkbox name="abandoned" label="Abandoned" checked={filter_parsed.abandoned} />
                            <Checkbox name="blocked" label="Blocked" checked={filter_parsed.blocked} />
                        </div>
                    </div>
                    <div class="filter-section">
                        <h1>State</h1>
                        <div class="filter-options">
                            <Checkbox name="merged" label="Merged" checked={filter_parsed.state?.merged} />
                            <Checkbox name="closed" label="Closed" checked={filter_parsed.state?.closed} />
                            <Checkbox name="other" label="Other" checked={filter_parsed.state?.other} />
                        </div>
                    </div>

                    <div class="filter-section">
                        <h1>Opened Between</h1>
                        <div class="filter-options">
                            <div class="filter-wrapper date">
                                <label for="start-opened-date">Start</label>
                                <input
                                    type="date"
                                    name="start-opened-date"
                                    id="start-opened-date"
                                    value={format_date(
                                        filter_parsed.start_opened_date,
                                    )}
                                />
                            </div>
                            <div class="filter-wrapper date">
                                <label for="end-opened-date">End</label>
                                <input
                                    type="date"
                                    name="end-opened-date"
                                    id="end-opened-date"
                                    value={format_date(
                                        filter_parsed.end_opened_date,
                                    )}
                                />
                            </div>
                        </div>
                    </div>

                    <div class="filter-section">
                        <h1>Merged/closed Between</h1>
                        <div class="filter-options">
                            <div class="filter-wrapper date">
                                <label for="start-merged-closed-date"
                                    >Start</label
                                >
                                <input
                                    type="date"
                                    name="start-merged-closed-date"
                                    id="start-merged-closed-date"
                                    value={filter_parsed.start_merged_closed_date}
                                />
                            </div>
                            <div class="filter-wrapper date">
                                <label for="end-merged-closed-date">End</label>
                                <input
                                    type="date"
                                    name="end-merged-closed-date"
                                    id="end-merged-closed-date"
                                    value={filter_parsed.end_merged_closed_date}
                                />
                            </div>
                        </div>
                    </div>

                    <button type="submit">Apply Filters</button>
                </aside>
            </div>
            <footer>
                {results ? <span id="infos">Aprox. results: {results.totalHits} ({results.processingTimeMs} ms)</span>:<></>}
                <Pagination
                    currentPage={parseInt(current_page ?? "1")}
                    pages={results?.totalPages ?? 1}
                />
            </footer>
        </main>
    </form>
</StartLayout>

<style lang="scss">
    html,
    body,
    form {
        margin: 0;
        min-width: 100%;
        min-height: 100%;
    }

    body {
        background: var(--colors-slate-700, #334155);
    }

    main {
        display: flex;
        min-width: 100%;
        min-height: 100%;
        padding: var(--spacing-7, 28px) var(--spacing-6, 24px);
        flex-direction: column;
        align-items: center;
        gap: var(--spacing-12, 48px);
        flex-shrink: 0;

        header {
            display: flex;
            align-items: center;
            gap: var(--spacing-12, 48px);
            align-self: stretch;

            h1 {
                color: var(--colors-base-white, #fff);
                text-align: center;
                font-family: Inter;
                font-size: 24px;
                font-style: normal;
                font-weight: 700;
                line-height: normal;
            }
        }

        #search {
            width: 730px;
            height: 50px;
            display: flex;
            flex-shrink: 0;
            border-radius: var(--border-radius-lg, 8px);
            border: 2px solid var(--colors-slate-400, #94a3b8);
            background: var(--colors-neutral-100, #f5f5f5);

            /* shadow/lg */
            box-shadow:
                0px 4px 6px -2px rgba(0, 0, 0, 0.05),
                0px 10px 15px -3px rgba(0, 0, 0, 0.1);

            align-items: center;

            input[type="search"] {
                width: 100%;
                height: 100%;
                border-top-left-radius: var(--border-radius-lg, 8px);
                border-bottom-left-radius: var(--border-radius-lg, 8px);
                background: var(--colors-neutral-100, #f5f5f5);
                padding-left: var(--spacing-2, 8px);

                color: #000;
                font-family: Inter;
                font-size: 24px;
                font-style: normal;
                font-weight: 400;
                line-height: normal;
            }

            #search-icon {
                margin-right: var(--spacing-2, 8px);
                margin-left: var(--spacing-2, 8px);
                min-width: 24px;
                height: 24px;
                vertical-align: middle;
            }
        }

        #content {
            display: flex;
            align-items: flex-start;
            gap: var(--spacing-2, 8px);
            align-self: stretch;
            min-height: 100%;

            #results {
                display: flex;
                padding: 8px 0px 8px 8px;
                flex-direction: column;
                align-items: flex-start;
                gap: var(--spacing-4, 16px);
                flex: 1 0 0;
                min-height: 100%;
            }

            #filters {
                display: flex;
                min-width: 350px;
                padding: 8px 0px 8px 8px;
                flex-direction: column;
                align-items: center;
                gap: 8px;
                align-self: stretch;
                border-left-width: 1px;
                border-left-color: var(--colors-slate-500, #64748b);
                min-height: 100%;

                button[type="submit"]:hover {
                    background: var(--colors-neutral-200, #e5e5e5);
                }
                button[type="submit"] {
                    border-radius: 25px 25px 25px 25px;
                    background: var(--colors-neutral-100, #f5f5f5);
                    padding: 8px;
                }

                .filter-section {
                    display: flex;
                    min-width: 100%;
                    flex-direction: column;
                    align-items: center;
                    gap: 8px;
                    align-self: stretch;
                    color: var(--colors-base-white, #fff);
                    font-family: Inter;
                    font-size: 24px;
                    font-style: normal;
                    font-weight: 700;
                    line-height: normal;

                    .filter-options {
                        display: flex;
                        padding: var(--spacing-2, 8px);
                        flex-direction: column;
                        align-items: flex-start;
                        gap: var(--spacing-1, 4px);
                        align-self: stretch;

                        .filter-wrapper {
                            color: var(--colors-base-white, #fff);
                            font-family: Inter;
                            font-size: 18px;
                            font-style: normal;
                            font-weight: 400;
                            line-height: normal;

                            display: flex;
                            align-items: center;
                            gap: 8px;
                        }
                        .date {
                            display: flex;
                            flex-direction: column;
                            justify-content: center;
                            align-items: flex-start;
                            gap: 8px;
                            align-self: stretch;

                            input {
                                background-color: var(
                                    --colors-slate-700,
                                    #334155
                                );
                                border-radius: var(
                                    --border-radius-default,
                                    4px
                                );
                                border: 1px solid
                                    var(--colors-slate-400, #94a3b8);
                                height: 40px;
                                min-width: 100%;
                            }
                        }
                    }
                }
            }
        }
        footer {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: var(--spacing-2, 8px);
            align-self: stretch;

            #infos {
                color: var(--colors-gray-300, #d1d5db);
                text-align: center;
                font-family: Inter;
                font-size: 16px;
                font-style: normal;
                font-weight: 400;
                line-height: normal;
            }
        }
    }
</style>
