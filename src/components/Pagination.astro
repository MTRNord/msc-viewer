---
interface Props {
    pages: number;
    currentPage?: number;
}

const { pages, currentPage = 1 } = Astro.props;
const parsed_url = new URL(Astro.request.url);
const prev_page_params = new URLSearchParams(parsed_url.searchParams);
prev_page_params.set('page', (currentPage-1).toString());
const next_page_params = new URLSearchParams(parsed_url.searchParams);
next_page_params.set('page', (currentPage+1).toString());
const range = Array(pages+1).fill(0, currentPage === 1 ? currentPage : currentPage - 1 , Math.min(currentPage + 5, pages+1));   
---

<div id="nav">
    {currentPage != 1 ?
    <a id="left" href={`/results?${prev_page_params.toString()}`}>
        <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <g clip-path="url(#clip0_13_147)">
                <path
                    d="M20 11H7.83L13.42 5.41L12 4L4 12L12 20L13.41 18.59L7.83 13H20V11Z"
                    fill="#323232"></path>
            </g>
            <defs>
                <clipPath id="clip0_13_147">
                    <rect width="24" height="24" fill="white"></rect>
                </clipPath>
            </defs>
        </svg>
    </a>:<></>}
    {range.map(
        (_, i) =>  {
        const new_params = new URLSearchParams(parsed_url.searchParams);
        new_params.set('page', i.toString());
        return (
            <>
            {
                i === currentPage ? (
                    i === 1 ? <a class="middle current rounded-start" href={`/results?${new_params.toString()}`}>{i}</a> : (i === pages && !(Math.min(currentPage + 5, currentPage) !== pages)  ? <a class="middle current rounded-end" href={`/results?${new_params.toString()}`}>{i}</a> : <a class="middle current" href={`/results?${new_params.toString()}`}>{i}</a>)
                ) : (i  === pages && !(Math.min(currentPage + 5, currentPage) !== pages) ? <a class="middle rounded-end" href={`/results?${new_params.toString()}`}>{i}</a> : <a class="middle" href={`/results?${new_params.toString()}`}>{i}</a>)
            }
        </>
        );
    })}
    {Math.min(currentPage + 5, currentPage) !== pages ?
    <a id="right" href={`/results?${next_page_params.toString()}`}>
        <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <g clip-path="url(#clip0_13_150)">
                <path
                    d="M12 4L10.59 5.41L16.17 11H4V13H16.17L10.59 18.59L12 20L20 12L12 4Z"
                    fill="#323232"></path>
            </g>
            <defs>
                <clipPath id="clip0_13_150">
                    <rect width="24" height="24" fill="white"></rect>
                </clipPath>
            </defs>
        </svg>
    </a>:<></>}
</div>

<style lang="scss">
    #nav {
        display: flex;
        justify-content: center;
        align-items: center;
        align-self: stretch;
        color: #000;
        font-family: Inter;
        font-size: 20px;
        font-style: normal;
        font-weight: 400;
        line-height: normal;
        #left,
        #right,
        .middle {
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        #left:hover,
        #right:hover,
        .middle:hover {
            background: var(--colors-neutral-200, #e5e5e5);
        }

        .current {
            background: var(--colors-neutral-200, #e5e5e5) !important;
        }

        .rounded-start {
            border-radius: 0;
            border-top-left-radius: 5px;
            border-bottom-left-radius: 5px;
        }

        .rounded-end {
            border-radius: 0;
            border-top-right-radius: 5px;
            border-bottom-right-radius: 5px;
        }

        #left {
            border-radius: var(--border-radius-full, 9999px) 0px 0px
                var(--border-radius-full, 9999px);
            background: var(--colors-neutral-100, #f5f5f5);
            width: 50px;
            height: 50px;
            flex-shrink: 0;
        }
        #right {
            border-radius: 0px var(--border-radius-full, 9999px)
                var(--border-radius-full, 9999px) 0px;
            background: var(--colors-neutral-100, #f5f5f5);
            width: 50px;
            height: 50px;
            flex-shrink: 0;
        }
        .middle {
            background: var(--colors-neutral-100, #f5f5f5);
            width: 50px;
            height: 50px;
            flex-shrink: 0;
        }
    }
</style>
